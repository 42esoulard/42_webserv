# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    HTTP_header_walkthrough.txt                        :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: esoulard <esoulard@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2021/04/02 16:15:19 by esoulard          #+#    #+#              #
#    Updated: 2021/04/03 13:30:55 by esoulard         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

From Medium tutorial part 2 : https://medium.com/from-the-scratch/http-server-what-do-you-need-to-know-to-build-a-simple-http-server-from-scratch-d1ef8945e4fa

THE HTTP EXCHANGE:

[Server:]   - listens for requests
[Client:]   - enters a URL into their browser (e.g. http://www.blabla.com )
            - their browser reconstructs the address by adding the default 
            port to it (e.g. http://www.blabla.com:80 ). This is the address
            the browser will write to.
            - the browser sends the HTTP request to the server's address.
[Server:]   - parses the HTTP request. Check if its proper:
                    - right format?
                    - right protocol? (here, HTTP/1.1)
            - checks if the action is doable (is the file there? does the client
            have proper rights to do the action?)
            - Calls the functions to take the actions corresponding to the method 
            called (GET/HEAD/PUT/POST/DELETE) on the file pointed to.
            - sends back a HTTP Response. Will have to contain the status code,
            date and time, server name, resource type, the content's length, a 
            blank line and the content. For status code, see RFC7231 or https://en.wikipedia.org/wiki/List_of_HTTP_status_codes.

Tadaaa!

HTTP REQUESTS AND RESPONSE EXAMPLE:
        Client enters localhost:8080 in their browser
        ---------------------------------
            HTTP CLIENT REQUEST:

            GET /favicon.ico HTTP/1.1 //i think favicon is the default thing
            Host: localhost:8080
            Connection: keep-alive
            User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36
            Accept: image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8
            Accept-Encoding: gzip, deflate, br
            Accept-Language: en-US,en;q=0.9
            //there is a blank line, and below can be a BODY (for POST and PUT methods)

        ---------------------------------

        ---------------------------------
            MINIMAL HTTP SERVER RESPONSE EXAMPLE:

            HTTP/1.1 200 OK
            Content-Type: text/plain
            Content-Length: 12
            //blank line, then content BODY        
            Hello world!

        ---------------------------------

METHODS:
GET is the default method used by the HTTP. GET and POST are common.
                
Some of those methods are:
GET — Fetch a URL
HEAD — Fetch information about a URL
PUT — Store to an URL
POST — Send form data to a URL and get a response back
DELETE — Delete a URL 


IF THE FETCHED CONTENT IS A FILE:
open the file, read the data into a variable. Count the number of bytes read 
from the file. When you read a simple text file, we can count while reading 
the file or from the return value of the read() function or strlen(variable). 
Set the Content-Length.
Construct the response header, then append the data we have read to it (if file 
was found and permissions were ok)

------------------------------------------------------------------------------------

FOR OUR WEBSERVER, WE MUST HANDLE THE FOLLOWING HEADER FIELDS:

◦ Category: description
            [example]
For more details, see https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields
and report to the mentioned RFCs 
Note: the smallest Request we could have would contain the first line and the host field
    e.g.    GET / HTTP/1.1
            Host: www.example.com

REQUEST FIELDS
◦ Accept-Charsets: character sets that are acceptable.
            [Accept-Charset: utf-8]
◦ Accept-Language: list of acceptable human languages for response. 
            [Accept-Language: en-US]
◦ Authorization: authentication credentials for HTTP authentication.
            [Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==]
◦ Host: domain name of the server + the TCP port number on which the server is listening (or no port if default)
            [Host: en.wikipedia.org:8080]
            [Host: en.wikipedia.org]
◦ Referer: the address of the previous web page from which a link to the currently requested page was followed.
            [Referer: http://en.wikipedia.org/wiki/Main_Page]
◦ User-Agent: The user agent string of the user agent. 	
            [User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/12.0]

RESPONSE FIELDS
◦ Allow: valid methods for a specified resource. To be used for a 405 Method not allowed
            [Allow: GET, HEAD]
◦ Content-Language: the natural language or languages of the intended audience for the enclosed content
            [Content-Language: da]
◦ Content-Length: the length of the response body in octets (8-bit bytes)
            [Content-Length: 348]
◦ Content-Location: an alternate location for the returned data
            [Content-Location: /index.htm]
◦ Content-Type: the MIME type of this content - its media type two part identifier 	
            [Content-Type: text/html; charset=utf-8]
◦ Date: the date and time that the message was sent (in "HTTP-date" format as defined by RFC 7231)
	        [Date: Tue, 15 Nov 1994 08:12:31 GMT]
◦ Last-Modified: last modified date for the requested object (in "HTTP-date" format as defined by RFC 7231)
            [Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT]
◦ Location: Used in redirection, or when a new resource has been created. 	
            [Location: http://www.w3.org/pub/WWW/People.html]
            [Location: /pub/WWW/People.html]
◦ Retry-After: If an entity is temporarily unavailable, this instructs the client to try again later. Value could be a specified period of time (in seconds) or a HTTP-date
            [Retry-After: 120]
            [Retry-After: Fri, 07 Nov 2014 23:59:59 GMT]
◦ Server: A name for the server
            [Server: Apache/2.4.1 (Unix)]
◦ Transfer-Encoding: The form of encoding used to safely transfer the entity to the user. Currently defined methods are: chunked, compress, deflate, gzip, identity. 
            [Transfer-Encoding: chunked]
◦ WWW-Authenticate: Indicates the authentication scheme that should be used to access the requested entity. 	
            [WWW-Authenticate: Basic]