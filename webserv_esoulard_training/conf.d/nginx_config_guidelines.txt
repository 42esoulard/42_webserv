Simple directive example:
    simple_directive       setting;

Container directive example (or "blocks"):
    block {
        simple_directive    setting;
        simple_directive    setting;
        simple_directive    setting;
    };

----------------------------------------

Divide the config files! :
split it into a set of feature‑specific files stored in the /etc/nginx/conf.d directory and use the include directive in the main nginx.conf file to reference the contents of the feature‑specific files.
ex:
    include conf.d/http;
    include conf.d/stream;
    include conf.d/exchange-enhanced;

-----------------------------------------
Contexts = types of traffic(ex events/http/mail/stream)
ex:
    user nobody; # a directive in the 'main' context

    events {
        # configuration of connection processing
    }
    http {
        # Configuration specific to HTTP and affecting all virtual servers  

        server {
            # configuration of HTTP virtual server 1       
            location /one {
                # configuration for processing URIs starting with '/one'
            }
            location /two {
                # configuration for processing URIs starting with '/two'
            }
        } 
        server {
            # configuration of HTTP virtual server 2
        }
    }
    stream {
        # Configuration specific to TCP/UDP and affecting all virtual servers
        server {
            # configuration of TCP virtual server 1 
        }
    }

>>> each child of a context inherits the parent's parameters, but they can be overridden within the child.

-----------------------------------------

For nginx, to make a site accessible, the steps are 
1) in /var/www/ , create a directory for the site containing a html folder, which itself
contains the site index
    ie. /var/www/my_site.com/html/index.html
    /!\ make sure to set 755 permissions for us

2) in /etc/nginx/sites-available/ , touch a server configuration file for our site
    ie. /etc/nginx/sites-available/my_site.com
    containing: 
        server {
        listen 80;

        root /var/www/my_site.com/html; // folder in which our pages are
        index index.html index.htm index.nginx.debian.html;

        server_name my_site.com www.my_site.com;
        location /  {
        try files $uri $uri/ =404;
            }
        }

3) create a symbolic link between the startup directory (in /etc/nginx/sites-enabled) and
our server block
    sudo ln -s /etc/nginx/sites-available/my_site.com /etc/nginx/sites-enabled

4) restart nginx and test your config
    sudo systemctl restart nginx
    sudo nginx -t

5) Since our domain isn't registered, modify the Hosts file in /etc/hosts:
add our host IP (127.0.1.1) on the last line of the file, with our site
    ie. 127.0.1.1 my_site.com www.my_site.com

-----------------------------------------

>>>>>> nginx.conf parsing:

spaces/tabs everywhere = OK, don't matter
    -> pass all kinds of spaces
    -> pass commented lines (starting with #)
if a field isn't known = DON'T LAUNCH
    -> match each configuration field with a specific function, if not found, DON'T LAUNCH
if a field doesnt have the right nb of arguments, = DON'T LAUNCH
    -> error cases: 
        - include: 
            if it doesn't have exactly one argument (no spaces)
            if the included file doesn't exist
            if the included file is a directory
            if the included file doesn't respect all the same rules as the config file's (ie. open {, unknown field, bad param..)
            /!\included files are inserted exactly where they are included. This means a
                file relevant to a specific scope should be included in that scope, not outside!!
            
        - server:
            if it isn't within http {} = ERROR

            - listen : if port is invalid (range 0-65535 is ok, reject anything else)
                can have an IP, or not 
                if unbindable IP >> ERROR
                >>> i think the error will be later once we send it to the program
                >>> parse IP and PORT maybe (if we need them separate later)

            - server_name : can be present or not. Can contain 1 or several names

            - error_page 404 /404.html (error code then error page file). 
                if there isnt exactly 2 arguments >> ERROR
                if error code isnt between 300 and 599 >> ERROR

            - client_max_body_size can be in bytes, or with k for kilobytes or M for 
            megabytes or with G for gigabytes.
                ->>> need conversion function
                ->>> don't set it too large or you might have a security issue (ddos possible)
            
            - location /images/ {
                root /data/www;
            }
                - limit_except GET {
                    deny  all;
                }
                to limit which methods are allowed on this route. Here, only GET is allowed.
               
                - autoindex off
                to disable directory listing

                - proxy_pass alternative_file.html
                    If location is requested, send file instead

                - root /etc/blabla;
                location path will be an alias for root path.
                    location /i/ {
                        root /data/w3;
                    }
                    The /data/w3/i/top.gif file will be sent in response to the “/i/top.gif” request.

                - types : list of mime types
}


if line doesn't end with ; = DON'T LAUNCH
if a { is dangling = DON'T LAUNCH
http {} can be empty, no problem
server {} can be empty, no problem
File can be empty, no problem (nginx requires at least the "events" section but i think we don't need it?)